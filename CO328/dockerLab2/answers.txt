--------------------------------------------------
CO528 : Docker Lab (part 2)
E/15/140
--------------------------------------------------

Answers:

1. Use the ‘docker build’ command to build an image and run ‘app1.js’. Ensure it is built successfully by doing ‘docker image ls’. Now run it and ensure it works by accessing http://localhost:3000.

sudo docker build ./ -t co328/app1
sudo docker run container -p 3000:3000 -d co328/app1





2. Now write a Dockerfile for ‘app2.js’ using the Dockerfile provided as a starting point. The provided Dockerfile copies files to the root directory of the image. Modify it to copy application files to the ‘/app’ directory within the image.

nano Dockerfile
	FROM node:latest
	COPY . .
	RUN npm install http
	ENV message "Hello World !"
	ENV colour “red”
	EXPOSE 3000
	CMD ["node", "app2.js"]

sudo docker build ./ -t co328/app2





3. ‘app2.js’ can be passed two arguments, ‘message’ and ‘colour’ as environment variables. Show how you can set the message and colour variables when running this docker image (without changing the code given.)

We can provide the environment variables as a command-line argument like the following:

sudo docker run -p 3000:3000 -d -e message=”Hello world” -e colour=”red” co328/app2

Or we can create a file as env in the directory same as Dockerfile locates and add environment variables to it and run the docker container with --env-file option as follows:

nano env
	message=SampleMessage
	colour=red

sudo docker container run -p 3000:3000 -d --env-file ./env co328/app2





4. ‘app3.js’ requires the express.js module. Run the ‘npm install express’ command to install the necessary modules when building the image. You can set the same environment variables as app2.js to change the message and background colour at run time.

nano Dockerfile
	FROM node:latest
	COPY . .
	RUN npm install express
	EXPOSE 3000
	CMD ["node", "app3.js"]

sudo docker build ./ -t co328/app3
sudo docker container run -p 3000:3000 -d --env-file ./env co328/app3





5. Write a Dockerfile for ‘app4.js’. It requires the ‘express’ and ‘express-fileupload’ modules to be installed. Run the image and upload a file. Verify that the file was uploaded by visiting http://localhost:3000/upload/filename (e.g. http://localhost:3000/upload/photo.jpg.)

nano Dockerfile
	FROM node:latest
	COPY . .
	RUN npm install express 
	RUN npm install express-fileupload
	EXPOSE 3000
	CMD ["mkdir", "upload"]
	CMD ["node", "app4.js"]

sudo docker container run -p 3000:3000 -d co328/app4





6. Stop the container you ran in (5) and remove the stopped container using the ‘docker container rm’ command. Now start a new container of the ‘app4.js’ image. Try to access the file you uploaded in (5.) Explain the reason why the file is not accessible.

It gives an error message, which says, the requested file is not found.

This is because the docker creates a virtual file system (know as volume) when it is mounted and once the docker container is removed, that ‘volume’ also removed.





7. What method(s) can be used to have persistent storage for containers? (that is, data is saved when a container is removed and restarted)

We can map a physical directory with a directory in a container using -v flag.

The following command maps the upload directory of the docker container with the /var/dockerFiles directory of the host machine. Now, even the container was removed, the updated content can be found from the directory, /var/dockerFiles , even the docker container was removed.

sudo docker container run -p 3000:3000 -f -v /var/dockerFiles:/upload co328/app4

